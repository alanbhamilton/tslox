// This file is auto-generated by tools/generate-ast.ts
// or "npm run gen-ast"

import Token from './token'
import { Expr } from './expr'

export interface IVisitor<R> {
  visitExpressionStmt(stmt: Expression): R
  visitPrintStmt(stmt: Print): R
  visitVarStmt(stmt: Var): R
}

export abstract class Stmt {
  abstract accept<R>(visitor: IVisitor<R>): R
}

// The AST classes.
export class Expression implements Stmt {
  public expression: Expr

  constructor(expression: Expr) {
    this.expression = expression
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitExpressionStmt(this)
  }
}

export class Print implements Stmt {
  public expression: Expr

  constructor(expression: Expr) {
    this.expression = expression
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitPrintStmt(this)
  }
}

export class Var implements Stmt {
  public name: Token
  public initializer: Expr | null

  constructor(name: Token, initializer: Expr | null) {
    this.name = name
    this.initializer = initializer
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitVarStmt(this)
  }
}
