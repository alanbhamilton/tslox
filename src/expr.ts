// This file is auto-generated by tools/generate-ast.ts
// or "npm run gen-ast"

import Token from './token'
import { LiteralObj } from './types'

export interface IVisitor<R> {
  visitAssignExpr(expr: Assign): R
  visitBinaryExpr(expr: Binary): R
  visitGroupingExpr(expr: Grouping): R
  visitLiteralExpr(expr: Literal): R
  visitUnaryExpr(expr: Unary): R
  visitTernaryExpr(expr: Ternary): R
  visitVariableExpr(expr: Variable): R
}

export abstract class Expr {
  abstract accept<R>(visitor: IVisitor<R>): R
}

// The AST classes.
export class Assign implements Expr {
  public name: Token
  public value: Expr

  constructor(name: Token, value: Expr) {
    this.name = name
    this.value = value
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitAssignExpr(this)
  }
}

export class Binary implements Expr {
  public left: Expr
  public operator: Token
  public right: Expr

  constructor(left: Expr, operator: Token, right: Expr) {
    this.left = left
    this.operator = operator
    this.right = right
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitBinaryExpr(this)
  }
}

export class Grouping implements Expr {
  public expression: Expr

  constructor(expression: Expr) {
    this.expression = expression
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitGroupingExpr(this)
  }
}

export class Literal implements Expr {
  public value: LiteralObj

  constructor(value: LiteralObj) {
    this.value = value
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitLiteralExpr(this)
  }
}

export class Unary implements Expr {
  public operator: Token
  public right: Expr

  constructor(operator: Token, right: Expr) {
    this.operator = operator
    this.right = right
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitUnaryExpr(this)
  }
}

export class Ternary implements Expr {
  public cond: Expr
  public truthy: Expr
  public falsy: Expr

  constructor(cond: Expr, truthy: Expr, falsy: Expr) {
    this.cond = cond
    this.truthy = truthy
    this.falsy = falsy
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitTernaryExpr(this)
  }
}

export class Variable implements Expr {
  public name: Token

  constructor(name: Token) {
    this.name = name
  }

  accept<R>(visitor: IVisitor<R>): R {
    return visitor.visitVariableExpr(this)
  }
}
