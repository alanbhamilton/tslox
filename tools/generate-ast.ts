import fs from 'fs'
import path from 'path'

const runFromCLI = require.main === module

const astDefinitions = {
  // Expressions
  Expr: {
    types: [
      'Binary   : left Expr, operator Token, right Expr',
      'Grouping : expression Expr',
      'Literal  : value LiteralObj',
      'Unary    : operator Token, right Expr',
      'Ternary  : cond Expr, truthy Expr, falsy Expr'
    ],
    importStrings: [
      "import Token from './token'",
      "import { LiteralObj } from './types'"
    ]
  }
}

export default class ASTGenerator {
  outputDir: string
  writer: fs.WriteStream | null = null

  constructor(outputDir: string) {
    this.outputDir = outputDir
  }

  public generate(): void {
    for (const [baseName, {types, importStrings}] of Object.entries(astDefinitions)) {
      const outputPath: string = path.resolve(this.outputDir, `${baseName.toLowerCase()}.ts`)
      this.writer = fs.createWriteStream(outputPath)
        .on('error', err => {
          console.error(err)
          process.exit(64)
        })
      this.defineAST(baseName, types, importStrings)
      this.writer.end()
    }
  }

  private write(s: string) {
    this.writer?.write(s)
  }

  private writeln(s = '') {
    this.write(s + '\n')
  }

  private defineAST(baseName: string, types: string[], importStrings: string[]): void {
    this.writeln('// This file is auto-generated by tools/generate-ast.ts')
    this.writeln('// or "npm run gen-ast"')
    this.writeln()
    this.defineImports(baseName, types, importStrings)
    this.defineVisitor(baseName, types)

    this.writeln(`export abstract class ${baseName} {`)
    this.writeln(`  abstract accept<R>(visitor: IVisitor<R>): R`)
    this.writeln(`}`)
    this.writeln()

    // The AST classes.
    types.forEach(type => {
      const className = type.split(':')[0].trim()
      const fields = type.split(':')[1].trim()
      this.defineType(baseName, className, fields)
    })
  }

  private defineImports(baseName: string, types: string[], importStrings: string[]): void {
    for (const importString of importStrings) {
      this.writeln(importString)
    }
    this.writeln()
  }

  private defineVisitor(baseName: string, types: string[]): void {
    this.writeln('export interface IVisitor<R> {')
    types.forEach(type => {
      const className = type.split(':')[0].trim()
      this.writeln(`  visit${className}${baseName}(${baseName.toLowerCase()}: ${className}): R`)
    })
    this.writeln('}')
    this.writeln()
  }

  private defineType(baseName: string, className: string, fieldList: string): void {
    const fields = fieldList.split(', ').map(field => field.split(' '))

    this.writeln(`export class ${className} implements ${baseName} {`)
    fields.forEach(field => {
      this.writeln(`  public ${field.join(': ')}`)
    })
    this.writeln()
    this.writeln(`  constructor(${fields.map(f => f.join(': ')).join(', ')}) {`)
    fields.forEach(([name, _type]) => {
      this.writeln(`    this.${name} = ${name}`)
    })
    this.writeln('  }')
    this.writeln()
    this.writeln('  accept<R>(visitor: IVisitor<R>): R {')
    this.writeln(`    return visitor.visit${className}${baseName}(this)`)
    this.writeln('  }')
    this.writeln('}')
    this.writeln()
  }
}

if (runFromCLI) {
  let args: string[] = process.argv.slice(2)

  if (args.length !== 1) {
    console.error('Usage: generate-ast <output directory>')
    process.exit(64)
  }
   new ASTGenerator(args[0]).generate()
}
